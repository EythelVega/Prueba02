// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prueba02.Models.dbModels;

#nullable disable

namespace Prueba02.Migrations
{
    [DbContext(typeof(ProyectoContext))]
    [Migration("20240521223850_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Matricula")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Grupo", b =>
                {
                    b.Property<int>("IdGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGrupo"), 1L, 1);

                    b.Property<int>("HoraFin")
                        .HasColumnType("int");

                    b.Property<int>("HoraInicio")
                        .HasColumnType("int");

                    b.Property<int>("IdMaestro")
                        .HasColumnType("int");

                    b.Property<int>("IdMateria")
                        .HasColumnType("int");

                    b.HasKey("IdGrupo")
                        .HasName("PK_TablaGrupo");

                    b.HasIndex("HoraFin");

                    b.HasIndex("HoraInicio");

                    b.HasIndex("IdMaestro");

                    b.HasIndex("IdMateria");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.GrupoEstudiante", b =>
                {
                    b.Property<int>("IdGrupo")
                        .HasColumnType("int");

                    b.Property<int>("IdEstudiantes")
                        .HasColumnType("int");

                    b.Property<int?>("Calificacion")
                        .HasColumnType("int");

                    b.HasKey("IdGrupo", "IdEstudiantes");

                    b.HasIndex("IdEstudiantes");

                    b.ToTable("GrupoEstudiantes");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.HoraClase", b =>
                {
                    b.Property<int>("IdHoraClase")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time");

                    b.HasKey("IdHoraClase");

                    b.ToTable("HoraClase");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.HoraClase1", b =>
                {
                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdHora")
                        .HasColumnType("int");

                    b.Property<int?>("IdHoraClase")
                        .HasColumnType("int");

                    b.HasIndex("IdHora");

                    b.ToTable("HoraClases");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.ImagenesError", b =>
                {
                    b.Property<int>("IdImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImagen"), 1L, 1);

                    b.Property<int>("IdError")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdImagen");

                    b.HasIndex("IdError");

                    b.ToTable("ImagenesError");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Materium", b =>
                {
                    b.Property<int>("IdMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMateria"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdMateria");

                    b.ToTable("Materia");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Noticia", b =>
                {
                    b.Property<int>("IdNoticias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNoticias"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoNoticia")
                        .HasColumnType("int");

                    b.HasKey("IdNoticias");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("TipoNoticia");

                    b.ToTable("Noticias");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.ReporteError", b =>
                {
                    b.Property<int>("IdReporteError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReporteError"), 1L, 1);

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaError")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasosParaReproducirError")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UrlPaginaError")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdReporteError")
                        .HasName("PK_Reporte Error");

                    b.ToTable("ReporteError");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.TipoNoticia", b =>
                {
                    b.Property<int>("TipoNoticia1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoNoticia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoNoticia1"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TipoNoticia1");

                    b.ToTable("TipoNoticias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Grupo", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.HoraClase", "HoraFinNavigation")
                        .WithMany("GrupoHoraFinNavigations")
                        .HasForeignKey("HoraFin")
                        .IsRequired()
                        .HasConstraintName("FK_Grupo_HoraClase2");

                    b.HasOne("Prueba02.Models.dbModels.HoraClase", "HoraInicioNavigation")
                        .WithMany("GrupoHoraInicioNavigations")
                        .HasForeignKey("HoraInicio")
                        .IsRequired()
                        .HasConstraintName("FK_Grupo_HoraClase1");

                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", "IdMaestroNavigation")
                        .WithMany("Grupos")
                        .HasForeignKey("IdMaestro")
                        .IsRequired()
                        .HasConstraintName("FK_Grupo_Usuario");

                    b.HasOne("Prueba02.Models.dbModels.Materium", "IdMateriaNavigation")
                        .WithMany("Grupos")
                        .HasForeignKey("IdMateria")
                        .IsRequired()
                        .HasConstraintName("FK_Grupo_HoraClase");

                    b.Navigation("HoraFinNavigation");

                    b.Navigation("HoraInicioNavigation");

                    b.Navigation("IdMaestroNavigation");

                    b.Navigation("IdMateriaNavigation");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.GrupoEstudiante", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", "IdEstudiantesNavigation")
                        .WithMany("GrupoEstudiantes")
                        .HasForeignKey("IdEstudiantes")
                        .IsRequired()
                        .HasConstraintName("FK_GrupoEstudiantes_Usuario");

                    b.HasOne("Prueba02.Models.dbModels.Grupo", "IdGrupoNavigation")
                        .WithMany("GrupoEstudiantes")
                        .HasForeignKey("IdGrupo")
                        .IsRequired()
                        .HasConstraintName("FK_GrupoEstudiantes_Grupo");

                    b.Navigation("IdEstudiantesNavigation");

                    b.Navigation("IdGrupoNavigation");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.HoraClase1", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.Grupo", "IdHoraNavigation")
                        .WithMany()
                        .HasForeignKey("IdHora")
                        .HasConstraintName("FK__HoraClase__IdHor__59FA5E80");

                    b.Navigation("IdHoraNavigation");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.ImagenesError", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.ReporteError", "IdErrorNavigation")
                        .WithMany("ImagenesErrors")
                        .HasForeignKey("IdError")
                        .IsRequired()
                        .HasConstraintName("FK_ImagenesError_Reporte Error");

                    b.Navigation("IdErrorNavigation");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Noticia", b =>
                {
                    b.HasOne("Prueba02.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Noticia")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Noticias_Usuario");

                    b.HasOne("Prueba02.Models.dbModels.TipoNoticia", "TipoNoticiaNavigation")
                        .WithMany("Noticia")
                        .HasForeignKey("TipoNoticia")
                        .IsRequired()
                        .HasConstraintName("FK_Noticias_TipoNoticias1");

                    b.Navigation("IdUsuarioNavigation");

                    b.Navigation("TipoNoticiaNavigation");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.ApplicationUser", b =>
                {
                    b.Navigation("GrupoEstudiantes");

                    b.Navigation("Grupos");

                    b.Navigation("Noticia");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Grupo", b =>
                {
                    b.Navigation("GrupoEstudiantes");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.HoraClase", b =>
                {
                    b.Navigation("GrupoHoraFinNavigations");

                    b.Navigation("GrupoHoraInicioNavigations");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.Materium", b =>
                {
                    b.Navigation("Grupos");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.ReporteError", b =>
                {
                    b.Navigation("ImagenesErrors");
                });

            modelBuilder.Entity("Prueba02.Models.dbModels.TipoNoticia", b =>
                {
                    b.Navigation("Noticia");
                });
#pragma warning restore 612, 618
        }
    }
}
